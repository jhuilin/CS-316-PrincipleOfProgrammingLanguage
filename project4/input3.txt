quickSort(A, p, r)
{
	if ( p < r )
	{
		q = partition(A, p, r);
		quickSort(A, p, q-1);
		quickSort(A, q+1, r);
	}
}

partition(A, p, r)
{
	x = A[r];
	i = p-1;
	j = p;
	while ( j <= r-1 )
	{
		if ( A[j] <= x )
		{
			i = i+1;
			temp = A[i];
			A[i] = A[j];
			A[j] = temp;
		}
		j = j+1;
	}
	temp = A[i+1];
	A[i+1] = A[r];
	A[r] = temp;
	returnVal = i+1;
}

printArray(A, size)
{
	i = 0;
	while ( i < size )
	{
		print A[i];
		i = i+1;
	}
}

main()
{
	B = new [10];
	B[0] = 8.0; B[1] = 3; B[2] = 5; B[3] = 1.2; B[4] = 9;
	B[5] = 7; B[6] = 4; B[7] = 6; B[8] = 2; B[9] = 10;

	quickSort(B, 0, 9);
	printArray(B, 10);
}